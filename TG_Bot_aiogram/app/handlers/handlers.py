from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

import app.keyboards as kb
from app.handlers.states import QuizState, GptState, TranslateState, VoiceInputState

from gpt import chat_gpt_service
from app.utils import quiz_prompt, convert_speech_to_text, convert_text_to_speech


from app.handlers.talk import talk_with_pers

router = Router()


#  ------------------------------–û–±—Ä–æ–±–Ω–∏–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è 'gpt' —Ç–∞ 'talk' --------------------

@router.message(F.text, GptState.waiting_for_answer_gpt)
async def process_user_message(message: Message):
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –∑–∞–ø–∏—Ç "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
    if not message.reply_to_message or "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è ChatGPT –∞–±–æ stop:" not in message.reply_to_message.text:
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –Ω–µ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –Ω–∞—à –∑–∞–ø–∏—Ç

    user_message = message.text.strip().lower()  # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –ø—Ä–æ–±—ñ–ª—ñ–≤ —ñ —Ä–æ–±–∏–º–æ –Ω–µ—á—É—Ç–ª–∏–≤–∏–º –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É

    if user_message == "stop":
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...", reply_markup=kb.menu)
    else:
        prompt = talk_with_pers.get('prompt', "–¢–∏ AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        print(f'Prompt is: {prompt}')
        response = await chat_gpt_service.send_question(prompt, user_message)
        await message.answer(response)
        await message.answer('–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?', reply_markup=kb.gpt_menu)




# ----------------------------------voice---------------------------------------------------------------

@router.callback_query(F.data == "start_voice_input")
async def start_voice_input(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
    await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üé§")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.set_state(VoiceInputState.waiting_for_voice)
    print(f"–°—Ç–∞–Ω –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {await state.get_state()}")


# TODO: –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ DeepVoice –≤–∏—Ç—è–≥—É—î –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

@router.message(F.voice, StateFilter(VoiceInputState.waiting_for_voice))
async def process_voice_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    print(f"–°—Ç–∞–Ω –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é: {current_state}")

    voice_file_id = message.voice.file_id
    file_info = await message.bot.get_file(voice_file_id)
    file_path = file_info.file_path

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ñ–∞–π–ª
    voice_file = await message.bot.download_file(file_path)

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    text = await convert_speech_to_text(voice_file)

    if not text:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await message.answer(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{text}")

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
    await state.clear()


